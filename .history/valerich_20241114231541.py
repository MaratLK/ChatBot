from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from questions import questions

TOKEN = '7659624823:AAEsDUcuT7_ocOMTxN_YcRbZm3CdpusdBhs'

user_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–û–ü-10 —Ñ–∞–∫—Ç–æ–≤ –æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–µüîù", callback_data='option1')],
        [InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ –æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–µ –í–∞–ª–µ—Ä—å–µ–≤–∏—á–µüì£", callback_data='option2')],
        [InlineKeyboardButton("–ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞—à–µ–º—É –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω—Éü´∂", callback_data='option3')],
        [InlineKeyboardButton("–ó–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –∫–æ–º–∞–Ω–¥—ã‚ö°Ô∏è", callback_data='option4')],
        [InlineKeyboardButton("–¢–µ—Å—Ç 360¬∞ü§ì", callback_data='test_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ø—Ä–∏–≤–µ—Ç!ü•≥ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'test_start':
        user_id = query.from_user.id
        user_data[user_id] = {"current_question": 0, "score": 0}
        await send_question(query, context)
    elif query.data.startswith("answer_"):
        await handle_answer(query, context)
    elif query.data == 'go_back':
        await start(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(query, context):
    user_id = query.from_user.id
    user_info = user_data.get(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if user_info is None or user_info["current_question"] >= len(questions):
        await finish_test(query, context)
        return

    question_data = questions[user_info["current_question"]]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_text = f"{question_data['question']}\n\n"
    for option in question_data['options']:
        full_text += f"{option}\n"

    await query.message.reply_text(full_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
    keyboard = [
        [InlineKeyboardButton(f"–í–∞—Ä–∏–∞–Ω—Ç {i + 1}", callback_data=f"answer_{i}")]
        for i in range(len(question_data['options']))
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(query, context):
    user_id = query.from_user.id
    user_info = user_data.get(user_id)
    if user_info is None:
        return

    selected_answer = int(query.data.split("_")[1])
    current_question = user_info["current_question"]
    correct_answer = questions[current_question]["correct"]

    if selected_answer == correct_answer:
        user_info["score"] += 1

    user_info["current_question"] += 1

    if user_info["current_question"] < len(questions):
        await send_question(query, context)
    else:
        await finish_test(query, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
async def finish_test(query, context):
    user_id = query.from_user.id
    user_info = user_data.get(user_id)
    if user_info is None:
        return

    total_questions = len(questions)
    score = user_info["score"]
    percentage = round((score / total_questions) * 100)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞

    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    await query.message.reply_text(
        f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ö–æ—Å—Ç—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!üéâ –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É. –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 360¬∞ –æ—Ç —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã‚ù§Ô∏è: {percentage}%."
    )
    del user_data[user_id]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É –º–µ–Ω—é
    await start(query, context)


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == '__main__':
    main()

"""
user_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ—Å—Ç–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–¢–û–ü-10 —Ñ–∞–∫—Ç–æ–≤ –æ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–º –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–µ –í–∞–ª–µ—Ä—å–µ–≤–∏—á–µ", callback_data='option1')],
        [InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ –æ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–µ –í–∞–ª–µ—Ä—å–µ–≤–∏—á–µ", callback_data='option2')],
        [InlineKeyboardButton("–ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞—à–µ–º—É –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω—É –í–∞–ª–µ—Ä—å–µ–≤–∏—á—É", callback_data='option3')],
        [InlineKeyboardButton("–ó–∞—Ä—è–¥–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –∫–æ–º–∞–Ω–¥—ã", callback_data='option4')],
        [InlineKeyboardButton("–¢–µ—Å—Ç 360¬∞", callback_data='test_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'test_start':
        user_id = query.from_user.id
        user_data[user_id] = {"current_question": 0, "score": 0}
        await send_question(query, context)
    elif query.data.startswith("answer_"):
        await handle_answer(query, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(query, context):
    user_id = query.from_user.id
    user_info = user_data.get(user_id)

    if user_info is None or user_info["current_question"] >= len(questions):
        await query.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        return

    question_data = questions[user_info["current_question"]]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_text = f"{question_data['question']}\n\n"
    for option in question_data['options']:
        full_text += f"{option}\n"

    await query.message.reply_text(full_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(f"–í–∞—Ä–∏–∞–Ω—Ç {i + 1}", callback_data=f"answer_{i}")]
        for i in range(len(question_data['options']))
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(query, context):
    user_id = query.from_user.id
    user_info = user_data.get(user_id)
    if user_info is None:
        return

    selected_answer = int(query.data.split("_")[1])
    current_question = user_info["current_question"]
    correct_answer = questions[current_question]["correct"]

    if selected_answer == correct_answer:
        user_info["score"] += 1

    user_info["current_question"] += 1

    if user_info["current_question"] < len(questions):
        await send_question(query, context)
    else:
        score = user_info["score"]
        await query.message.reply_text(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {len(questions)}.")
        del user_data[user_id]

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == '__main__':
    main()

"""